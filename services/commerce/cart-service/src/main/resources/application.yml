spring:
  application:
    name: cart-service

  profiles:
    active: local

  # Database Configuration
  datasource:
    url: jdbc:mysql://localhost:3306/cart_service?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: root
    password: password
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000

  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true

  # Redis Configuration
  redis:
    host: localhost
    port: 6379
    database: 0
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms

  # Kafka Configuration
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: cart-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.ecommerce.shared.models.events"

# Server Configuration
server:
  port: 8085
  servlet:
    context-path: /

# gRPC Configuration
grpc:
  server:
    port: 9085
    enable-reflection: true
  client:
    product-service:
      address: "static://product-service:9084"
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-time: 30s
      keep-alive-timeout: 5s
      keep-alive-without-calls: true
      max-inbound-message-size: 4MB
      max-inbound-metadata-size: 8KB
      deadline: 5s
    inventory-service:
      address: "static://inventory-service:9086"
      negotiation-type: plaintext
      enable-keep-alive: true
      keep-alive-time: 30s
      keep-alive-timeout: 5s
      keep-alive-without-calls: true
      max-inbound-message-size: 4MB
      max-inbound-metadata-size: 8KB
      deadline: 5s

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      service: cart-service

# Logging Configuration
logging:
  level:
    com.ecommerce.cartservice: INFO
    org.springframework.data.redis: DEBUG
    org.springframework.data.jpa: DEBUG
    org.springframework.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{correlationId}] [%X{tenantId}] [%X{userId}] %logger{36} - %msg%n"

# Custom Application Properties
cart:
  redis:
    ttl-days: 7
  calculation:
    tax-rate: 0.08
  backup:
    enabled: true
    batch-size: 100
  cleanup:
    expired-days: 7
    batch-size: 100

# External Services Configuration - Using gRPC only
# REST service URLs removed as we now use gRPC exclusively for internal communication

---
# Docker/Production Profile
spring:
  config:
    activate:
      on-profile: docker

  datasource:
    url: jdbc:mysql://mysql:3306/cart_service?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}

  redis:
    host: redis
    port: 6379
    password: ${REDIS_PASSWORD:}

  kafka:
    bootstrap-servers: kafka:9092

server:
  port: 8080

---
# Test Profile
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
    driver-class-name: org.h2.Driver

  jpa:
    hibernate:
      ddl-auto: create-drop
    database-platform: org.hibernate.dialect.H2Dialect

  redis:
    host: localhost
    port: 6370 # Different port for tests

logging:
  level:
    com.ecommerce.cartservice: DEBUG
    org.springframework.data.redis: DEBUG
