server:
  port: 8086

spring:
  application:
    name: order-service

  datasource:
    url: jdbc:mysql://localhost:3306/order_service_db?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME:ecommerce_user}
    password: ${DB_PASSWORD:ecommerce_pass}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      connection-timeout: 20000
      leak-detection-threshold: 60000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        batch_versioned_data: true

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false
    consumer:
      group-id: order-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.ecommerce.shared.models.events"
        spring.json.use.type.headers: false

  jackson:
    serialization:
      write-dates-as-timestamps: false
    deserialization:
      fail-on-unknown-properties: false

# gRPC Configuration
grpc:
  server:
    port: 9086
    enable-reflection: true
  client:
    inventory-service:
      address: static://inventory-service:9084
      negotiation-type: plaintext
    product-service:
      address: static://product-service:9082
      negotiation-type: plaintext
    user-service:
      address: static://user-service:9081
      negotiation-type: plaintext
    payment-service:
      address: static://payment-service:9087
      negotiation-type: plaintext

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    db:
      enabled: true

# Logging Configuration
logging:
  level:
    com.ecommerce.orderservice: INFO
    org.springframework.kafka: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Custom Application Properties
app:
  order:
    number-prefix: "ORD"
    default-currency: "USD"
    tax-rate: 0.08
    free-shipping-threshold: 100.00
    default-shipping-cost: 9.99

  kafka:
    topics:
      order-events: order-events
      inventory-events: inventory-events
      payment-events: payment-events

  security:
    jwt:
      secret: ${JWT_SECRET:mySecretKey}
      expiration: 86400000 # 24 hours
